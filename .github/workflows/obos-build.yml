# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Build OBOS.

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Get libgcc binaries
      run: |
        git clone https://github.com/osdev0/libgcc-binaries.git
        echo "libgcc-binaries-directory=`realpath libgcc-binaries`"  >> "$GITHUB_OUTPUT"

    - name: Install dependencies.
      run: sudo apt install xorriso nasm 

    - name: Make empty initrd.tar file
      run: touch ${{ github.workspace }}/config/initrd.tar

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}/x86_64
        -DCMAKE_BUILD_TYPE=Release
        -DOBOS_USE_CLANG=ON
        -DOBOS_ENABLE_UBSAN=ON
        -DOBOS_ENABLE_WERROR=ON
        -DLIBGCC=${{ steps.strings.outputs.libgcc-binaries-directory }}/libgcc-x86_64-no-red-zone.a
        --toolchain ${{ github.workspace }}/src/build/x86_64/toolchain.cmake
        -S ${{ github.workspace }}

    - name: Build
      working-directory: ${{ github.workspace }}/scripts
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: |
          cmake --build ${{ steps.strings.outputs.build-output-dir }}/x86_64 
          ./generate_initrd-x86_64.sh
          cmake --build ${{ steps.strings.outputs.build-output-dir }}/x86_64 

# TODO: Tests
#    - name: Test
#      working-directory: ${{ steps.strings.outputs.build-output-dir }}
#      run: 
